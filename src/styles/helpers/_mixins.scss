// ==========================================================
//  CSS Grid Mixins (take one)
// ==========================================================

//  global grid variables (☠ = don't touch)
$☠__ms-col-gap: null;
$☠__ms-row-gap: null;
$☠__ms-col-count: null;
$☠__ms-row-count: null;

//
//  repeat function
//
@function repeat($repeat, $stuff: 1fr) {
  $list: ();

  @for $i from 1 through $repeat {
    $list: append($list, $stuff, space);
  }

  @return $list;
}

//
//  grid-column mixin
//
@mixin grid-column($start: auto, $span: 1) {
  //  grid-column-gap using left margin
  @if $☠__ms-col-gap and not $☠__ms-col-count and $start !=1 {
    margin-left: $☠__ms-col-gap;

    @supports (grid-column-gap: 1px) {
      margin-left: 0;
    }
  }

  -ms-grid-column: if($☠__ms-col-count, $start + $start - 1, $start);
  -ms-grid-column-span: if($☠__ms-col-count, $span + $span - 1, $span);
  grid-column: #{$start}/#{$start + $span};
  @content;
}

//
//  grid-row mixin
//
@mixin grid-row($start: auto, $span: 1) {
  //  grid-row-gap using top margin
  @if $☠__ms-row-gap and not $☠__ms-row-count and $start !=1 {
    margin-top: $☠__ms-row-gap;

    @supports (grid-row-gap: 1px) {
      margin-top: 0;
    }
  }

  -ms-grid-row: if($☠__ms-row-count, $start + $start - 1, $start);
  -ms-grid-row-span: if($☠__ms-row-count, $span + $span - 1, $span);
  grid-row: #{$start}/#{$start + $span};
  @content;
}

//
//  grid-cell mixin
//
@mixin grid-cell(
  $col-start: auto,
  $col-span: 1,
  $row-start: auto,
  $row-span: 1
) {
  @include grid-column($col-start, $col-span);
  @include grid-row($row-start, $row-span);
  @content;
}

//
//  grid-area mixin
//
@mixin grid-area($area) {
  $area: map-get($grid-areas, $area);
  @include grid-column(nth($area, 1), nth($area, 2));
  @include grid-row(nth($area, 3), nth($area, 4));
  @content;
}

//
//  grid mixin
//
@mixin grid($grid-map) {
  $cols: map-get($grid-map, cols);
  $rows: map-get($grid-map, rows);
  $gap: map-get($grid-map, gap);
  $col-gap: map-get($grid-map, col-gap);
  $col-gap: if($col-gap, $col-gap, $gap);
  $row-gap: map-get($grid-map, row-gap);
  $row-gap: if($row-gap, $row-gap, $gap);

  //  if cols or rows are numbers convert to fraction lists
  @if $cols and length($cols) ==1 and unitless($cols) {
    $cols: repeat($cols);
  }

  @if $rows and length($rows) ==1 and unitless($rows) {
    $rows: repeat($rows);
  }

  //  ie does not support grid gap - why we insert the gap space as a row or colum
  //  note! the first loop is to ensure cols/rows are not a multidimensional list
  //  (when generated by the repeat function)
  $ms-cols: null;
  $ms-rows: null;

  @if $col-gap and $cols {
    $ms-cols: ();

    @each $col in $cols {
      $ms-cols: if(
        type-of($col) ==list,
        join($ms-cols, $col),
        append($ms-cols, $col)
      );
    }

    @for $i from 1 through length($ms-cols) - 1 {
      $ms-cols: set-nth($ms-cols, $i, nth($ms-cols, $i) $col-gap);
    }

    //  globalize ms col count (used by grid-column)
    $☠__ms-col-count: length($ms-cols) !global;
  }

  @if $row-gap and $rows {
    $ms-rows: ();

    @each $row in $rows {
      $ms-rows: if(
        type-of($row) ==list,
        join($ms-rows, $row),
        append($ms-rows, $row)
      );
    }

    @for $i from 1 through length($ms-rows) - 1 {
      $ms-rows: set-nth($ms-rows, $i, nth($ms-rows, $i) $row-gap);
    }

    //  globalize ms row count (used by grid-row)
    $☠__ms-row-count: length($ms-rows) !global;
  }

  //
  $☠__ms-col-gap: $col-gap !global;
  $☠__ms-row-gap: $row-gap !global;

  display: -ms-grid;
  display: grid;

  -ms-grid-columns: $ms-cols or $cols;
  -ms-grid-rows: $ms-rows or $rows;

  grid-template-columns: $cols;
  grid-template-rows: $rows;

  grid-column-gap: $col-gap;
  grid-row-gap: $row-gap;
  @content;
}

// ==========================================================
//  Use example
// ==========================================================

//
//  grid map (cols, rows, gap, col-gap, row-gap)
//

$grid: (
  cols: 4fr repeat(2, minmax(200px, 250px)) repeat(2, minmax(80px, 118px)),
  rows: 1px repeat(4, 110px),
  row-gap: 4px,
  col-gap: 4px
);
$grid_1440: (
  cols: minmax(200px, 400px) minmax(170px, 350px) minmax(30px, 60px)
    repeat(4, minmax(85px, 110px)),
  rows: 250px 124px 31px 72px 80px,
  row-gap: 4px,
  col-gap: 4px
);
$grid_1024: (
  cols: minmax(180px, 228px) minmax(160px, 186px) minmax(20px, 40px)
    repeat(4, minmax(80px, 95px)),
  rows: 250px repeat(2, 140px) 80px,
  row-gap: 4px,
  col-gap: 4px
);
$grid_960: (
  cols: repeat(2, minmax(84px, 100%)) repeat(2, minmax(40px, 100%))
    minmax(84px, 100%),
  rows: 1px repeat(4, minmax(130px, 100%)) minmax(84px, 100%),
  row-gap: 4px,
  col-gap: 4px
);
$grid_500: (
  cols: repeat(2, minmax(84px, 100%)) repeat(2, minmax(40px, 100%))
    minmax(84px, 100%),
  rows: 1px repeat(4, minmax(130px, 100%)) minmax(84px, 100%),
  row-gap: 4px,
  col-gap: 4px
);
$grid_400: (
  cols: 1fr 1fr,
  rows: 1px repeat(6, minmax(130px, 100%)) repeat(2, minmax(84px, 100%))
    minmax(130px, 100%),
  row-gap: 4px,
  col-gap: 4px
);




$grid_ad: (
  cols: 4fr repeat(2, minmax(200px, 250px)) repeat(2, minmax(80px, 118px)),
  rows: 160px repeat(4, 90px),
  row-gap: 4px,
  col-gap: 4px
);
$grid_1440_ad: (
  cols: minmax(200px, 400px) minmax(170px, 350px) minmax(30px, 60px)
    repeat(4, minmax(85px, 110px)),
  rows: 148px 124px 31px 72px 80px,
  row-gap: 4px,
  col-gap: 4px
);
$grid_1024_ad: (
  cols: minmax(180px, 228px) minmax(160px, 186px) minmax(20px, 40px)
    repeat(4, minmax(80px, 95px)),
  rows: 148px repeat(2, 140px) 80px,
  row-gap: 4px,
  col-gap: 4px
);
$grid_960_ad: (
  cols: repeat(2, minmax(84px, 100%)) repeat(2, minmax(40px, 100%))
    minmax(84px, 100%),
  rows: 160px repeat(4, minmax(130px, 100%)) minmax(84px, 100%),
  row-gap: 4px,
  col-gap: 4px
);
$grid_500_ad: (
  cols: repeat(2, minmax(84px, 100%)) repeat(2, minmax(40px, 100%))
    minmax(84px, 100%),
  rows: 120px repeat(4, minmax(130px, 100%)) minmax(84px, 100%),
  row-gap: 4px,
  col-gap: 4px
);
$grid_400_ad: (
  cols: 1fr 1fr,
  rows: 120px repeat(6, minmax(130px, 100%)) repeat(2, minmax(84px, 100%))
    minmax(130px, 100%),
  row-gap: 4px,
  col-gap: 4px
);

//
//  Grid area map (col, col-span, row, row-span)
//

$grid-areas: (
  //   area-51: (
    //     1,
    //     2,
    //     1,
    //     2
    //   )
);

.grid {
  //  create grid
  max-width: 1425px;
  margin-left: auto;
  margin-right: auto;

  &.grid-advert--disable {
    @include grid($grid);
    

    @media screen and (max-width: $mdDesktopWidth) {
      @include grid($grid);
    }

    @media screen and (max-width: $mdDesktopWidth) {
      @include grid($grid_1440);
    }
    @media screen and (max-width: $tableWidth) {
      @include grid($grid_1024);
    }
    @media screen and (max-width: $lgTableWidth) {
      @include grid($grid_960);
    }
    @media screen and (max-width: $phoneWidth) {
      @include grid($grid_500);
    }
    @media screen and (max-width: $mdPhoneWidth) {
      @include grid($grid_400);
    }
  }
  &.grid-advert--enable {
    @include grid($grid_ad); 

    @media screen and (max-width: $mdDesktopWidth) {
      @include grid($grid_ad);
    }

    @media screen and (max-width: $mdDesktopWidth) {
      @include grid($grid_1440_ad);
    }
    @media screen and (max-width: $tableWidth) {
      @include grid($grid_1024_ad);
    }
    @media screen and (max-width: $lgTableWidth) {
      @include grid($grid_960_ad);
    }
    @media screen and (max-width: $phoneWidth) {
      @include grid($grid_500_ad);
    }
    @media screen and (max-width: $mdPhoneWidth) {
      @include grid($grid_400_ad);
    }
  }
}
